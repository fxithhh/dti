{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\DesignThinking\\\\chess-app\\\\src\\\\components\\\\logic.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chess from \"chess.js\"; // import Chess from  \"chess.js\"(default) if receiving an error about new Chess() not being a constructor\n\nimport GameInstructions from \"../components/gameinstructions\";\nimport Chessboard from \"chessboardjsx\";\nimport { db } from \".././firebase\";\nimport { uid } from \"uid\";\nimport { set, ref, update } from \"../../node_modules/firebase/database\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass HumanVsHuman extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      fen: \"start\",\n      // square styles for active drop square\n      dropSquareStyle: {},\n      // custom square styles\n      squareStyles: {},\n      // square with the currently clicked piece\n      pieceSquare: \"\",\n      // currently clicked square\n      square: \"\",\n      // array of past game moves\n      history: [],\n      teamTurn: \"White's Turn!\",\n      position: []\n    };\n\n    this.highlightSquare = (sourceSquare, squaresToHighlight) => {\n      const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce((a, c) => {\n        return { ...a,\n          ...{\n            [c]: {\n              background: \"radial-gradient(circle, #0066cc 36%, transparent 40%)\",\n              borderRadius: \"50%\"\n            }\n          },\n          ...squareStyling({\n            history: this.state.history,\n            pieceSquare: this.state.pieceSquare\n          })\n        };\n      }, {});\n      this.setState(_ref => {\n        let {\n          squareStyles\n        } = _ref;\n        return {\n          squareStyles: { ...squareStyles,\n            ...highlightStyles\n          }\n        };\n      });\n    };\n\n    this.onDrop = _ref2 => {\n      let {\n        sourceSquare,\n        targetSquare\n      } = _ref2;\n      // console.log(\"game over\", this.game.in_check())\n      let team = this.game.get(sourceSquare); // let check = this.game.in_check()\n      // see if the move is legal\n\n      let move = this.game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\" // always promote to a queen for example simplicity\n\n      }); //change turns\n\n      if (team.color === \"w\" && move !== null) {\n        this.setState({\n          teamTurn: \"Black's Turn!\"\n        });\n      } else if (team.color === \"b\" && move !== null) {\n        this.setState({\n          teamTurn: \"White's Turn!\"\n        });\n      } // illegal move\n\n\n      if (move === null) return;\n      this.setState(_ref3 => {\n        let {\n          history,\n          pieceSquare\n        } = _ref3;\n        return {\n          fen: this.game.fen(),\n          history: this.game.history({\n            verbose: true\n          }),\n          squareStyles: squareStyling({\n            pieceSquare,\n            history\n          })\n        };\n      }); //record moves history\n\n      console.log(\"history\", this.game.history({\n        verbose: true\n      })); //to database\n\n      const historyDb = this.game.history({\n        verbose: true\n      });\n      const latestMoveObj = historyDb.slice(-1);\n      const latestTo = latestMoveObj.map(toPos => toPos.to).toString();\n      const latestFrom = latestMoveObj.map(fromPos => fromPos.from).toString();\n      const path = ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8']; //update to database\n\n      const latestFromNumber = path.indexOf(latestFrom);\n      const latestToNumber = path.indexOf(latestTo);\n      console.log(latestFromNumber, latestToNumber);\n      const setToGreen = 2;\n      update(ref(db, `/Main/${latestFromNumber}`), {\n        [latestFromNumber]: setToGreen\n      }, setToGreen = 0);\n      set(ref(db, `/Main/${latestToNumber}`), {\n        [latestToNumber]: setToGreen\n      });\n    };\n\n    this.getPosition = position => {\n      this.setState({\n        myPosition: position\n      });\n      console.log(position);\n      console.log(\"check\", this.game.in_check(), \"checkmate\", this.game.game_over(), \"stalemate\", this.game.in_stalemate());\n      let check = this.game.in_check(); //change turns\n\n      if (check === true) {\n        this.setState({\n          teamTurn: \"Check!\"\n        });\n      }\n    };\n\n    this.onSquareClick = square => {\n      this.setState(_ref4 => {\n        let {\n          history\n        } = _ref4;\n        return {\n          squareStyles: squareStyling({\n            pieceSquare: square,\n            history\n          }),\n          pieceSquare: square\n        };\n      });\n      let move = this.game.move({\n        from: this.state.pieceSquare,\n        to: square,\n        promotion: \"q\" // always promote to a queen for example simplicity\n\n      }); // get list of possible moves for this square\n\n      let moves = this.game.moves({\n        square: square,\n        verbose: true\n      }); // exit if there are no moves available for this square\n\n      if (moves.length === 0) return;\n      let squaresToHighlight = [];\n\n      for (var i = 0; i < moves.length; i++) {\n        squaresToHighlight.push(moves[i].to);\n      }\n\n      this.highlightSquare(square, squaresToHighlight); // illegal move\n\n      if (move === null) return;\n      this.setState({\n        fen: this.game.fen(),\n        history: this.game.history({\n          verbose: true\n        }),\n        pieceSquare: \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.game = new Chess();\n  } // keep clicked square style and remove hint squares\n  // removeHighlightSquare = () => {\n  //   this.setState(({ pieceSquare, history }) => ({\n  //     squareStyles: squareStyling({ pieceSquare, history }),\n  //   }));\n  // };\n  // show possible moves\n\n\n  // onMouseOutSquare = (square) => this.removeHighlightSquare(square);\n  render() {\n    const {\n      fen,\n      dropSquareStyle,\n      squareStyles,\n      teamTurn,\n      history\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: teamTurn === \"White's Turn!\" ? \"text-amber-600 text-2xl font-bold mb-4\" : \"text-sky-500 text-2xl font-semibold mb-4\",\n        children: teamTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), this.props.children({\n        squareStyles,\n        position: fen,\n        onMouseOverSquare: this.onMouseOverSquare,\n        onMouseOutSquare: this.onMouseOutSquare,\n        onDrop: this.onDrop,\n        dropSquareStyle,\n        onDragOverSquare: this.onDragOverSquare,\n        onSquareClick: this.onSquareClick,\n        onSquareRightClick: this.onSquareRightClick,\n        teamTurn,\n        getPosition: this.getPosition\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GameInstructions, {\n        history: history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nHumanVsHuman.propTypes = {\n  children: PropTypes.func\n};\nexport default function WithMoveValidation() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HumanVsHuman, {\n      children: _ref5 => {\n        let {\n          position,\n          onDrop,\n          onMouseOverSquare,\n          onMouseOutSquare,\n          squareStyles,\n          dropSquareStyle,\n          onDragOverSquare,\n          onSquareClick,\n          onSquareRightClick,\n          getPosition\n        } = _ref5;\n        return /*#__PURE__*/_jsxDEV(Chessboard, {\n          id: \"humanVsHuman\",\n          width: 320,\n          position: position,\n          onDrop: onDrop,\n          onMouseOverSquare: onMouseOverSquare,\n          onMouseOutSquare: onMouseOutSquare,\n          boardStyle: {\n            borderRadius: \"5px\",\n            boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n          },\n          squareStyles: squareStyles,\n          dropSquareStyle: dropSquareStyle,\n          onDragOverSquare: onDragOverSquare,\n          onSquareClick: onSquareClick,\n          onSquareRightClick: onSquareRightClick,\n          lightSquareStyle: {\n            backgroundColor: \"AliceBlue\"\n          },\n          darkSquareStyle: {\n            backgroundColor: \"CornFlowerBlue\"\n          },\n          getPosition: getPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_c = WithMoveValidation;\n\nconst squareStyling = _ref6 => {\n  let {\n    pieceSquare,\n    history\n  } = _ref6;\n  // const sourceSquare = history.length && history[history.length - 1].from;\n  // const targetSquare = history.length && history[history.length - 1].to;\n  return {// [pieceSquare]: { backgroundColor: \"green\" }, //selected square\n    // ...(history.length && {\n    //   [sourceSquare]: {\n    //     backgroundColor: \"pink\",\n    //   },\n    // }),\n    // ...(history.length && {\n    //   [targetSquare]: {\n    //     backgroundColor: \"purple\",\n    //   },\n    // }),\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"WithMoveValidation\");","map":{"version":3,"sources":["C:/Users/user/Documents/DesignThinking/chess-app/src/components/logic.jsx"],"names":["React","Component","PropTypes","Chess","GameInstructions","Chessboard","db","uid","set","ref","update","HumanVsHuman","state","fen","dropSquareStyle","squareStyles","pieceSquare","square","history","teamTurn","position","highlightSquare","sourceSquare","squaresToHighlight","highlightStyles","reduce","a","c","background","borderRadius","squareStyling","setState","onDrop","targetSquare","team","game","get","move","from","to","promotion","color","verbose","console","log","historyDb","latestMoveObj","slice","latestTo","map","toPos","toString","latestFrom","fromPos","path","latestFromNumber","indexOf","latestToNumber","setToGreen","getPosition","myPosition","in_check","game_over","in_stalemate","check","onSquareClick","moves","length","i","push","componentDidMount","render","props","children","onMouseOverSquare","onMouseOutSquare","onDragOverSquare","onSquareRightClick","propTypes","func","WithMoveValidation","boxShadow","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAA8B;;AAC9B,OAAOC,gBAAP,MAA6B,gCAA7B;AAGA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,SAASC,EAAT,QAAmB,eAAnB;AACA,SAASC,GAAT,QAAoB,KAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,QAAiC,sCAAjC;;;;AAEA,MAAMC,YAAN,SAA2BV,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAGnCW,KAHmC,GAG3B;AACNC,MAAAA,GAAG,EAAE,OADC;AAEN;AACAC,MAAAA,eAAe,EAAE,EAHX;AAIN;AACAC,MAAAA,YAAY,EAAE,EALR;AAMN;AACAC,MAAAA,WAAW,EAAE,EAPP;AAQN;AACAC,MAAAA,MAAM,EAAE,EATF;AAUN;AACAC,MAAAA,OAAO,EAAE,EAXH;AAYNC,MAAAA,QAAQ,EAAE,eAZJ;AAaNC,MAAAA,QAAQ,EAAE;AAbJ,KAH2B;;AAAA,SAgCnCC,eAhCmC,GAgCjB,CAACC,YAAD,EAAeC,kBAAf,KAAsC;AACtD,YAAMC,eAAe,GAAG,CAACF,YAAD,EAAe,GAAGC,kBAAlB,EAAsCE,MAAtC,CACtB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACR,eAAO,EACL,GAAGD,CADE;AAEL,aAAG;AACD,aAACC,CAAD,GAAK;AACHC,cAAAA,UAAU,EACR,uDAFC;AAGHC,cAAAA,YAAY,EAAE;AAHX;AADJ,WAFE;AASL,aAAGC,aAAa,CAAC;AACfZ,YAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWM,OADL;AAEfF,YAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWI;AAFT,WAAD;AATX,SAAP;AAcD,OAhBqB,EAiBtB,EAjBsB,CAAxB;AAoBA,WAAKe,QAAL,CAAc;AAAA,YAAC;AAAEhB,UAAAA;AAAF,SAAD;AAAA,eAAuB;AACnCA,UAAAA,YAAY,EAAE,EAAE,GAAGA,YAAL;AAAmB,eAAGS;AAAtB;AADqB,SAAvB;AAAA,OAAd;AAGD,KAxDkC;;AAAA,SA2DnCQ,MA3DmC,GA2D1B,SAAoC;AAAA,UAAnC;AAAEV,QAAAA,YAAF;AAAgBW,QAAAA;AAAhB,OAAmC;AAC3C;AACA,UAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,GAAV,CAAcd,YAAd,CAAX,CAF2C,CAG3C;AAEA;;AACA,UAAIe,IAAI,GAAG,KAAKF,IAAL,CAAUE,IAAV,CAAe;AACxBC,QAAAA,IAAI,EAAEhB,YADkB;AAExBiB,QAAAA,EAAE,EAAEN,YAFoB;AAGxBO,QAAAA,SAAS,EAAE,GAHa,CAGR;;AAHQ,OAAf,CAAX,CAN2C,CAY3C;;AACA,UAAIN,IAAI,CAACO,KAAL,KAAe,GAAf,IAAsBJ,IAAI,KAAK,IAAnC,EAAyC;AACvC,aAAKN,QAAL,CAAe;AAAEZ,UAAAA,QAAQ,EAAE;AAAZ,SAAf;AACD,OAFD,MAEO,IAAIe,IAAI,CAACO,KAAL,KAAe,GAAf,IAAsBJ,IAAI,KAAK,IAAnC,EAAyC;AAC9C,aAAKN,QAAL,CAAe;AAAEZ,UAAAA,QAAQ,EAAE;AAAZ,SAAf;AACD,OAjB0C,CAmB3C;;;AACA,UAAIkB,IAAI,KAAK,IAAb,EAAmB;AACnB,WAAKN,QAAL,CAAc;AAAA,YAAC;AAAEb,UAAAA,OAAF;AAAWF,UAAAA;AAAX,SAAD;AAAA,eAA+B;AAC3CH,UAAAA,GAAG,EAAE,KAAKsB,IAAL,CAAUtB,GAAV,EADsC;AAE3CK,UAAAA,OAAO,EAAE,KAAKiB,IAAL,CAAUjB,OAAV,CAAkB;AAAEwB,YAAAA,OAAO,EAAE;AAAX,WAAlB,CAFkC;AAG3C3B,UAAAA,YAAY,EAAEe,aAAa,CAAC;AAAEd,YAAAA,WAAF;AAAeE,YAAAA;AAAf,WAAD;AAHgB,SAA/B;AAAA,OAAd,EArB2C,CA2B3C;;AACAyB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKT,IAAL,CAAUjB,OAAV,CAAkB;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAlB,CAAvB,EA5B2C,CA8B3C;;AACA,YAAMG,SAAS,GAAG,KAAKV,IAAL,CAAUjB,OAAV,CAAkB;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAlB,CAAlB;AACA,YAAMI,aAAa,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAC,CAAjB,CAAtB;AACA,YAAMC,QAAQ,GAAGF,aAAa,CAACG,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACX,EAAjC,EAAqCY,QAArC,EAAjB;AACA,YAAMC,UAAU,GAAGN,aAAa,CAACG,GAAd,CAAkBI,OAAO,IAAIA,OAAO,CAACf,IAArC,EAA2Ca,QAA3C,EAAnB;AAEA,YAAMG,IAAI,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAAb,CApC2C,CAsC3C;;AACA,YAAMC,gBAAgB,GAAGD,IAAI,CAACE,OAAL,CAAaJ,UAAb,CAAzB;AACA,YAAMK,cAAc,GAAGH,IAAI,CAACE,OAAL,CAAaR,QAAb,CAAvB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYW,gBAAZ,EAA8BE,cAA9B;AAEA,YAAMC,UAAU,GAAG,CAAnB;AACAhD,MAAAA,MAAM,CAACD,GAAG,CAACH,EAAD,EAAM,SAAQiD,gBAAiB,EAA/B,CAAJ,EAAuC;AAC3C,SAACA,gBAAD,GAAoBG;AADuB,OAAvC,EAEHA,UAAU,GAAG,CAFV,CAAN;AAGAlD,MAAAA,GAAG,CAACC,GAAG,CAACH,EAAD,EAAM,SAAQmD,cAAe,EAA7B,CAAJ,EAAqC;AACtC,SAACA,cAAD,GAAkBC;AADoB,OAArC,CAAH;AAID,KA/GkC;;AAAA,SAiHnCC,WAjHmC,GAiHpBvC,QAAD,IAAc;AAC1B,WAAKW,QAAL,CAAc;AAAE6B,QAAAA,UAAU,EAAExC;AAAd,OAAd;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKT,IAAL,CAAU0B,QAAV,EAArB,EAA2C,WAA3C,EAAwD,KAAK1B,IAAL,CAAU2B,SAAV,EAAxD,EAA+E,WAA/E,EAA4F,KAAK3B,IAAL,CAAU4B,YAAV,EAA5F;AACA,UAAIC,KAAK,GAAG,KAAK7B,IAAL,CAAU0B,QAAV,EAAZ,CAJ0B,CAM1B;;AACA,UAAIG,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAKjC,QAAL,CAAe;AAAEZ,UAAAA,QAAQ,EAAE;AAAZ,SAAf;AACD;AACF,KA3HkC;;AAAA,SA0JnC8C,aA1JmC,GA0JlBhD,MAAD,IAAY;AAC1B,WAAKc,QAAL,CAAc;AAAA,YAAC;AAAEb,UAAAA;AAAF,SAAD;AAAA,eAAkB;AAC9BH,UAAAA,YAAY,EAAEe,aAAa,CAAC;AAAEd,YAAAA,WAAW,EAAEC,MAAf;AAAuBC,YAAAA;AAAvB,WAAD,CADG;AAE9BF,UAAAA,WAAW,EAAEC;AAFiB,SAAlB;AAAA,OAAd;AAKA,UAAIoB,IAAI,GAAG,KAAKF,IAAL,CAAUE,IAAV,CAAe;AACxBC,QAAAA,IAAI,EAAE,KAAK1B,KAAL,CAAWI,WADO;AAExBuB,QAAAA,EAAE,EAAEtB,MAFoB;AAGxBuB,QAAAA,SAAS,EAAE,GAHa,CAGR;;AAHQ,OAAf,CAAX,CAN0B,CAY1B;;AACA,UAAI0B,KAAK,GAAG,KAAK/B,IAAL,CAAU+B,KAAV,CAAgB;AAC1BjD,QAAAA,MAAM,EAAEA,MADkB;AAE1ByB,QAAAA,OAAO,EAAE;AAFiB,OAAhB,CAAZ,CAb0B,CAkB1B;;AACA,UAAIwB,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AAExB,UAAI5C,kBAAkB,GAAG,EAAzB;;AACA,WAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACC,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC7C,QAAAA,kBAAkB,CAAC8C,IAAnB,CAAwBH,KAAK,CAACE,CAAD,CAAL,CAAS7B,EAAjC;AACD;;AAED,WAAKlB,eAAL,CAAqBJ,MAArB,EAA6BM,kBAA7B,EA1B0B,CA4B1B;;AACA,UAAIc,IAAI,KAAK,IAAb,EAAmB;AACnB,WAAKN,QAAL,CAAc;AACZlB,QAAAA,GAAG,EAAE,KAAKsB,IAAL,CAAUtB,GAAV,EADO;AAEZK,QAAAA,OAAO,EAAE,KAAKiB,IAAL,CAAUjB,OAAV,CAAkB;AAAEwB,UAAAA,OAAO,EAAE;AAAX,SAAlB,CAFG;AAGZ1B,QAAAA,WAAW,EAAE;AAHD,OAAd;AAMD,KA9LkC;AAAA;;AAmBnCsD,EAAAA,iBAAiB,GAAG;AAClB,SAAKnC,IAAL,GAAY,IAAIhC,KAAJ,EAAZ;AACD,GArBkC,CAuBnC;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAiKA;AAEAoE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1D,MAAAA,GAAF;AAAOC,MAAAA,eAAP;AAAwBC,MAAAA,YAAxB;AAAsCI,MAAAA,QAAtC;AAAgDD,MAAAA;AAAhD,QAA4D,KAAKN,KAAvE;AAEA,wBAAO;AAAA,8BACL;AAAI,QAAA,SAAS,EAAEO,QAAQ,KAAK,eAAb,GAA+B,wCAA/B,GAA0E,0CAAzF;AAAA,kBAAsIA;AAAtI;AAAA;AAAA;AAAA;AAAA,cADK,EAEJ,KAAKqD,KAAL,CAAWC,QAAX,CAAoB;AACnB1D,QAAAA,YADmB;AAEnBK,QAAAA,QAAQ,EAAEP,GAFS;AAGnB6D,QAAAA,iBAAiB,EAAE,KAAKA,iBAHL;AAInBC,QAAAA,gBAAgB,EAAE,KAAKA,gBAJJ;AAKnB3C,QAAAA,MAAM,EAAE,KAAKA,MALM;AAMnBlB,QAAAA,eANmB;AAOnB8D,QAAAA,gBAAgB,EAAE,KAAKA,gBAPJ;AAQnBX,QAAAA,aAAa,EAAE,KAAKA,aARD;AASnBY,QAAAA,kBAAkB,EAAE,KAAKA,kBATN;AAUnB1D,QAAAA,QAVmB;AAWnBwC,QAAAA,WAAW,EAAE,KAAKA;AAXC,OAApB,CAFI,eAeL;AAAA;AAAA;AAAA;AAAA,cAfK,eAgBL,QAAC,gBAAD;AAAkB,QAAA,OAAO,EAAEzC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAhBK;AAAA,oBAAP;AAkBD;;AAvNkC;;AAA/BP,Y,CACGmE,S,GAAY;AAAEL,EAAAA,QAAQ,EAAEvE,SAAS,CAAC6E;AAAtB,C;AAyNrB,eAAe,SAASC,kBAAT,GAA8B;AAC3C,sBACE;AAAA,2BACE,QAAC,YAAD;AAAA,gBACG;AAAA,YAAC;AACA5D,UAAAA,QADA;AAEAY,UAAAA,MAFA;AAGA0C,UAAAA,iBAHA;AAIAC,UAAAA,gBAJA;AAKA5D,UAAAA,YALA;AAMAD,UAAAA,eANA;AAOA8D,UAAAA,gBAPA;AAQAX,UAAAA,aARA;AASAY,UAAAA,kBATA;AAUAlB,UAAAA;AAVA,SAAD;AAAA,4BAYC,QAAC,UAAD;AACE,UAAA,EAAE,EAAC,cADL;AAEE,UAAA,KAAK,EAAE,GAFT;AAGE,UAAA,QAAQ,EAAEvC,QAHZ;AAIE,UAAA,MAAM,EAAEY,MAJV;AAKE,UAAA,iBAAiB,EAAE0C,iBALrB;AAME,UAAA,gBAAgB,EAAEC,gBANpB;AAOE,UAAA,UAAU,EAAE;AACV9C,YAAAA,YAAY,EAAE,KADJ;AAEVoD,YAAAA,SAAS,EAAG;AAFF,WAPd;AAWE,UAAA,YAAY,EAAElE,YAXhB;AAYE,UAAA,eAAe,EAAED,eAZnB;AAaE,UAAA,gBAAgB,EAAE8D,gBAbpB;AAcE,UAAA,aAAa,EAAEX,aAdjB;AAeE,UAAA,kBAAkB,EAAEY,kBAftB;AAgBE,UAAA,gBAAgB,EAAE;AAAEK,YAAAA,eAAe,EAAE;AAAnB,WAhBpB;AAiBE,UAAA,eAAe,EAAE;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WAjBnB;AAkBE,UAAA,WAAW,EAAEvB;AAlBf;AAAA;AAAA;AAAA;AAAA,gBAZD;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD;KAxCuBqB,kB;;AA0CxB,MAAMlD,aAAa,GAAG,SAA8B;AAAA,MAA7B;AAAEd,IAAAA,WAAF;AAAeE,IAAAA;AAAf,GAA6B;AAClD;AACA;AAEA,SAAO,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXK,GAAP;AAaD,CAjBD","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chess from \"chess.js\"; // import Chess from  \"chess.js\"(default) if receiving an error about new Chess() not being a constructor\r\nimport GameInstructions from \"../components/gameinstructions\";\r\n\r\n\r\nimport Chessboard from \"chessboardjsx\";\r\n\r\nimport { db } from \".././firebase\"\r\nimport { uid } from \"uid\";\r\nimport { set, ref, update } from \"../../node_modules/firebase/database\";\r\n\r\nclass HumanVsHuman extends Component {\r\n  static propTypes = { children: PropTypes.func };\r\n\r\n  state = {\r\n    fen: \"start\",\r\n    // square styles for active drop square\r\n    dropSquareStyle: {},\r\n    // custom square styles\r\n    squareStyles: {},\r\n    // square with the currently clicked piece\r\n    pieceSquare: \"\",\r\n    // currently clicked square\r\n    square: \"\",\r\n    // array of past game moves\r\n    history: [],\r\n    teamTurn: \"White's Turn!\",\r\n    position: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.game = new Chess();\r\n  }\r\n\r\n  // keep clicked square style and remove hint squares\r\n  // removeHighlightSquare = () => {\r\n  //   this.setState(({ pieceSquare, history }) => ({\r\n  //     squareStyles: squareStyling({ pieceSquare, history }),\r\n  //   }));\r\n\r\n  // };\r\n\r\n  // show possible moves\r\n  highlightSquare = (sourceSquare, squaresToHighlight) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, #0066cc 36%, transparent 40%)\",\r\n              borderRadius: \"50%\",\r\n            },\r\n          },\r\n          ...squareStyling({\r\n            history: this.state.history,\r\n            pieceSquare: this.state.pieceSquare,\r\n          }),\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    this.setState(({ squareStyles }) => ({\r\n      squareStyles: { ...squareStyles, ...highlightStyles },\r\n    }));\r\n  };\r\n\r\n  //on drop the chess piece moved\r\n  onDrop = ({ sourceSquare, targetSquare }) => {\r\n    // console.log(\"game over\", this.game.in_check())\r\n    let team = this.game.get(sourceSquare)\r\n    // let check = this.game.in_check()\r\n\r\n    // see if the move is legal\r\n    let move = this.game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n\r\n    //change turns\r\n    if (team.color === \"w\" && move !== null) {\r\n      this.setState(({ teamTurn: \"Black's Turn!\" }))\r\n    } else if (team.color === \"b\" && move !== null) {\r\n      this.setState(({ teamTurn: \"White's Turn!\" }))\r\n    }\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    this.setState(({ history, pieceSquare }) => ({\r\n      fen: this.game.fen(),\r\n      history: this.game.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history }),\r\n    }));\r\n\r\n    //record moves history\r\n    console.log(\"history\", this.game.history({ verbose: true }))\r\n\r\n    //to database\r\n    const historyDb = this.game.history({ verbose: true })\r\n    const latestMoveObj = historyDb.slice(-1)\r\n    const latestTo = latestMoveObj.map(toPos => toPos.to).toString()\r\n    const latestFrom = latestMoveObj.map(fromPos => fromPos.from).toString()\r\n\r\n    const path = ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8'];\r\n\r\n    //update to database\r\n    const latestFromNumber = path.indexOf(latestFrom)\r\n    const latestToNumber = path.indexOf(latestTo)\r\n\r\n    console.log(latestFromNumber, latestToNumber)\r\n\r\n    const setToGreen = 2\r\n    update(ref(db, `/Main/${latestFromNumber}`), {\r\n      [latestFromNumber]: setToGreen,\r\n    }, setToGreen = 0)\r\n    set(ref(db, `/Main/${latestToNumber}`), {\r\n      [latestToNumber]: setToGreen,\r\n    })\r\n\r\n  };\r\n\r\n  getPosition = (position) => {\r\n    this.setState({ myPosition: position })\r\n    console.log(position)\r\n    console.log(\"check\", this.game.in_check(), \"checkmate\", this.game.game_over(), \"stalemate\", this.game.in_stalemate())\r\n    let check = this.game.in_check()\r\n\r\n    //change turns\r\n    if (check === true) {\r\n      this.setState(({ teamTurn: \"Check!\" }))\r\n    }\r\n  }\r\n\r\n  // onSquareClick = square => {\r\n  //   // get list of possible moves for this square\r\n  //   let moves = this.game.moves({\r\n  //     square: square,\r\n  //     verbose: true\r\n  //   });\r\n\r\n  //   // exit if there are no moves available for this square\r\n  //   if (moves.length === 0) return;\r\n\r\n  //   let squaresToHighlight = [];\r\n  //   for (var i = 0; i < moves.length; i++) {\r\n  //     squaresToHighlight.push(moves[i].to);\r\n  //   }\r\n\r\n  //   this.highlightSquare(square, squaresToHighlight);\r\n  // };\r\n\r\n  // // central squares get diff dropSquareStyles\r\n  // onDragOverSquare = square => {\r\n  //   this.setState({\r\n  //     dropSquareStyle:\r\n  //       square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n  //         ? { backgroundColor: \"#cc0000\" }\r\n  //         : { boxShadow: \"inset 0 0 1px 4px #009933\" } //border on select\r\n  //   });\r\n  // };\r\n\r\n  //when tile is clicked\r\n  onSquareClick = (square) => {\r\n    this.setState(({ history }) => ({\r\n      squareStyles: squareStyling({ pieceSquare: square, history }),\r\n      pieceSquare: square,\r\n    }));\r\n\r\n    let move = this.game.move({\r\n      from: this.state.pieceSquare,\r\n      to: square,\r\n      promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n\r\n    // get list of possible moves for this square\r\n    let moves = this.game.moves({\r\n      square: square,\r\n      verbose: true,\r\n    });\r\n\r\n    // exit if there are no moves available for this square\r\n    if (moves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < moves.length; i++) {\r\n      squaresToHighlight.push(moves[i].to);\r\n    }\r\n\r\n    this.highlightSquare(square, squaresToHighlight);\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    this.setState({\r\n      fen: this.game.fen(),\r\n      history: this.game.history({ verbose: true }),\r\n      pieceSquare: \"\",\r\n    }\r\n    );\r\n  };\r\n\r\n  // onMouseOutSquare = (square) => this.removeHighlightSquare(square);\r\n\r\n  render() {\r\n    const { fen, dropSquareStyle, squareStyles, teamTurn, history } = this.state;\r\n\r\n    return <>\r\n      <h2 className={teamTurn === \"White's Turn!\" ? \"text-amber-600 text-2xl font-bold mb-4\" : \"text-sky-500 text-2xl font-semibold mb-4\"}>{teamTurn}</h2>\r\n      {this.props.children({\r\n        squareStyles,\r\n        position: fen,\r\n        onMouseOverSquare: this.onMouseOverSquare,\r\n        onMouseOutSquare: this.onMouseOutSquare,\r\n        onDrop: this.onDrop,\r\n        dropSquareStyle,\r\n        onDragOverSquare: this.onDragOverSquare,\r\n        onSquareClick: this.onSquareClick,\r\n        onSquareRightClick: this.onSquareRightClick,\r\n        teamTurn,\r\n        getPosition: this.getPosition\r\n      })}\r\n      <br></br>\r\n      <GameInstructions history={history} />\r\n    </>\r\n  }\r\n}\r\n\r\nexport default function WithMoveValidation() {\r\n  return (\r\n    <div>\r\n      <HumanVsHuman>\r\n        {({\r\n          position,\r\n          onDrop,\r\n          onMouseOverSquare,\r\n          onMouseOutSquare,\r\n          squareStyles,\r\n          dropSquareStyle,\r\n          onDragOverSquare,\r\n          onSquareClick,\r\n          onSquareRightClick,\r\n          getPosition\r\n        }) => (\r\n          <Chessboard\r\n            id=\"humanVsHuman\"\r\n            width={320}\r\n            position={position}\r\n            onDrop={onDrop}\r\n            onMouseOverSquare={onMouseOverSquare}\r\n            onMouseOutSquare={onMouseOutSquare}\r\n            boardStyle={{\r\n              borderRadius: \"5px\",\r\n              boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\r\n            }}\r\n            squareStyles={squareStyles}\r\n            dropSquareStyle={dropSquareStyle}\r\n            onDragOverSquare={onDragOverSquare}\r\n            onSquareClick={onSquareClick}\r\n            onSquareRightClick={onSquareRightClick}\r\n            lightSquareStyle={{ backgroundColor: \"AliceBlue\" }}\r\n            darkSquareStyle={{ backgroundColor: \"CornFlowerBlue\" }}\r\n            getPosition={getPosition}\r\n          />\r\n        )}\r\n      </HumanVsHuman>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst squareStyling = ({ pieceSquare, history }) => {\r\n  // const sourceSquare = history.length && history[history.length - 1].from;\r\n  // const targetSquare = history.length && history[history.length - 1].to;\r\n\r\n  return {\r\n    // [pieceSquare]: { backgroundColor: \"green\" }, //selected square\r\n    // ...(history.length && {\r\n    //   [sourceSquare]: {\r\n    //     backgroundColor: \"pink\",\r\n    //   },\r\n    // }),\r\n    // ...(history.length && {\r\n    //   [targetSquare]: {\r\n    //     backgroundColor: \"purple\",\r\n    //   },\r\n    // }),\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}